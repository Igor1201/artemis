on: [push, pull_request]

name: CI

jobs:
  # test:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Clone repository
  #     uses: actions/checkout@master
  #   - name: Run tests
  #     uses: comigor/actions/dart-test@master
  #     env:
  #       DTA_EXCLUDE_REGEX: example
  check-version-and-changelog:
    # needs: test
    runs-on: ubuntu-latest
    container: golang
    steps:
    - uses: actions/checkout@master
    - run: |
        GO111MODULE=on go get -u github.com/itchyny/gojq/cmd/gojq@d24ecb5d89a9eee8b4cd2071bdff7585a8b44f0e
        cd "$GITHUB_WORKSPACE"
    - name: Check if version on pubspec.yaml was changed and if there's an entry for this new version on CHANGELOG
      run: |
        echo "GITHUB EVENT NAME: ${{ github.event_name }}"
        echo "GITHUB REF: $GITHUB_REF"
        echo "GITHUB REF: ${{ github.ref }}"
        echo "GITHUB HEAD REF: ${{ github.head_ref }}"
        echo "GITHUB BASE REF: ${{ github.base_ref }}"

        package_version=$(cat pubspec.yaml | gojq --yaml-input -r '.version')

        # If we are pointing the PR to master OR have merged on master branch
        if [ "${{ github.event_name }}" = "pull_request" -a "${{ github.base_ref }}" = "master" ] || \
        [ "${{ github.event_name }}" = "push" -a "${{ github.ref }}" = "refs/heads/master" ]; then
          # Package name must NOT contains "beta" word
          echo "$package_version" | grep beta && { >&2 echo "Version cant contain beta" && exit 1 }
        fi
        
        # If we are pointing the PR to beta OR have merged on beta branch
        if [ "${{ github.event_name }}" = "pull_request" -a "${{ github.base_ref }}" = "beta" ] || \
          [ "${{ github.event_name }}" = "push" -a "${{ github.ref }}" = "refs/heads/beta" ]; then
          # Package name must contains "beta" word
          echo "$package_version" | grep beta || { >&2 echo "Missing beta on version" && exit 1 }
        fi

        cat CHANGELOG.md | grep "$package_version"
        mkdir -p artifacts
        echo "$package_version" > artifacts/version
    - uses: actions/upload-artifact@v1
      with:
        name: package_data
        path: artifacts
  create-tag-and-release:
    needs: check-version-and-changelog
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/beta'
    steps:
    - uses: actions/checkout@master
    - uses: actions/download-artifact@v1
      with:
        name: package_data
    - id: vars
      run: |
        echo "::set-output name=package_version::v$(cat package_data/version)"
    - name: Push tag
      uses: anothrNick/github-tag-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        CUSTOM_TAG: ${{ steps.vars.outputs.package_version }}
    - name: Create release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.vars.outputs.package_version }}
        release_name: Release ${{ steps.vars.outputs.package_version }}
  deploy:
    needs: create-tag-and-release
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/beta'
    steps:
    - uses: actions/checkout@master
    - name: Publish to pub.dev
      uses: comigor/actions/pub-publish@master
      env:
        PUB_CREDENTIALS: ${{ secrets.PUB_CREDENTIALS }}