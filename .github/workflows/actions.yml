on: [push, pull_request]

name: CI

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Clone repository
      uses: actions/checkout@master
    - name: Run tests
      uses: comigor/actions/dart-test@master
      env:
        DTA_EXCLUDE_REGEX: example
  check-version-and-changelog:
    needs: test
    runs-on: ubuntu-latest
    container: golang
    steps:
    - uses: actions/checkout@master
    - run: |
        GO111MODULE=on go get -u github.com/itchyny/gojq/cmd/gojq@d24ecb5d89a9eee8b4cd2071bdff7585a8b44f0e
        cd "$GITHUB_WORKSPACE"
    - name: Check if version on pubspec.yaml was changed and if there's an entry for this new version on CHANGELOG
      run: |
        echo "::debug::GITHUB REF: $GITHUB_REF"
        echo "::debug::GITHUB REF: ${{ github.ref }}"
        echo "::debug::GITHUB HEAD REF: ${{ github.head_ref }}"
        echo "::debug::GITHUB BASE REF: ${{ github.base_ref }}"
        echo "::debug::GITHUB EVENT: ${{ github.event }}"
        echo "${{ github.event }}" | gojq . || true
        echo "::debug::GITHUB EVENT PATH: ${{ github.event_path }}"
        cat "${{ github.event_path }}" | gojq . || true
        mkdir -p artifacts
        package_version=$(cat pubspec.yaml | gojq --yaml-input -r '.version')
        cat CHANGELOG.md | grep "$package_version"
        echo "$package_version" > artifacts/version
    - uses: actions/upload-artifact@v1
      with:
        name: package_data
        path: artifacts
  create-tag-and-release:
    needs: check-version-and-changelog
    runs-on: ubuntu-latest
    if: contains(github.ref, 'master')
    steps:
    - uses: actions/checkout@master
    - uses: actions/download-artifact@v1
      with:
        name: package_data
    - id: vars
      run: |
        echo "::set-output name=package_version::v$(cat package_data/version)"
    - name: Push tag
      uses: anothrNick/github-tag-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        CUSTOM_TAG: ${{ steps.vars.outputs.package_version }}
    - name: Create release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.vars.outputs.package_version }}
        release_name: Release ${{ steps.vars.outputs.package_version }}
  deploy:
    needs: create-tag-and-release
    runs-on: ubuntu-latest
    if: contains(github.ref, 'master')
    steps:
    - uses: actions/checkout@master
    - name: Publish to pub.dev
      uses: comigor/actions/pub-publish@master
      env:
        PUB_CREDENTIALS: ${{ secrets.PUB_CREDENTIALS }}